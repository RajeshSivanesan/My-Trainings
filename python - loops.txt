#primitive loops
#while

loops - runs in a coiled manner until the condition is satisfied

i = 0
while i < 10:
 print(i)
 i = i + 1

#break statement stops the loop even if the condition is true
i = 0
while i < 10:
 print(i)
 if (i == 6)
  break
 i = i + 1

identationError
is very important for loops for tab spacing
which marks it in the same block. If not its ouside the block.

logicalError

#exercise 1
# program to print the list with increment of one to each element of list A
A = [1,2,3,4,5,6,7,8,9]
B = []
i = 0
while i < len(A):
    B.append(A[i] + 1)
    i = i + 1
print(B)

#exercies2
i = 1500
while i <= 2700:
    if i % 5 == 0 and i % 7 == 0:
        print(i)
    i = i + 1

#For loop
iterates over an iterable.
it uses the keyword "For"
for i in list_tuple_set:
 print(i)

example
x = [1,2,3,4,5]
for i in x:
    print(i)

we can use range to create a set of numbers
range(0, 10)
[0,1,2...9]
we can give step also.

x = [1,2,3,4,5]
for i in range(0, len(x)):
    print(x[i])

two possible combinations.

to print each characters
for i in "inceptez":
    print(i)

to print a pyramid of stars
n = 5
for i in range(0, n+1):
    print('* '*i)
    if i == n:
        for i in range(n, 0, -1):
            print('* '*i)

functions
defined using def
whatever is idented, it belongs to the function block of code.
doc string is put using ''''''
sample_func? get the doc string
and second method to use shift+tab to get doc string
third method is sample_func.__doc__

method not returning any by default returs none string.
of type <class 'NoneType'>

#Recursive functions
Factorial without using recursion
def factorial(num):
    fact = 1
    for i in range(1, num+1):
        fact = fact*i
    return fact
        
factorial(3)

factorial with recursion
def factorial(num):
    if num == 1:
        return num
    else:
        return num * factorial(num - 1)
        
factorial(5)

send function as a parameter - callbacks in JS
#sample.
def sample_callback(list, sample_fun):
    '''returns the sum of the list elements'''
    sum = 0
    for i in list:
        sum = sum + i
    sample_fun(sum)
    
def sample_fun(value):
    print(value)
    
sample_callback([1,2,3,4,5], sample_fun)